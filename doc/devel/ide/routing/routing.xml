<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="rsd_ide">
    <module name="Routing">
      <element name="TSegment">
        <short>Modelizes a straight line joining two points</short>
      </element>
      <element name="TSegments">
        <short>Modelizes a set of segments.</short>
      </element>
      <element name="TRoute">
        <short>Modelizes a path linking two points (the first and the last). Its a compact modelization of a set of segments.</short>
        <descr>A roote should be kept so that none of its segments intersect.</descr>
      </element>
      <element name="TRoutes">
        <short>Modelizes a set of routes.</short>
      </element>
      <element name="TArea">
        <short>Modelizes a space region as an union of multiple rectangles.</short>
        <descr>An area should always be contiguous and intersection of any two recatngles should be reduced to the common boundary.</descr>
      </element>
      <element name="Bounds">
        <short>Creates the smallest rectangle containing all the route points.</short>
      </element>
      <element name="RectCenter">
        <short>Returns the coordinates of the center point of a rectrangle.</short>
      </element>
      <element name="Intersect">
        <short>Returns <i>False</i> if the segments have a null intersection and <i>True</i> otherwise</short>
      </element>
      <element name="Segment">
        <short>Returns a segment joining the two points given as arguments</short>
      </element>
      <element name="Intersection">
        <short>Returns an area which results from the intersection of a given area with a given rectangle and provides the indexes of the rectangles of the area which intersection with the rectangle given as parameter is non null.</short>
      </element>
      <element name="Route">
        <short>Create a route joining two given points inside a given area. Returns <i>True</i> if it succeeds to build the roote, otherwise it returns <i>False</i>.</short>
      </element>
      <element name="TIndex">
        <short>Base integer type for indexing arrays in the rooting unit</short>
        <descr>This is the base type for indexing arrays in the rooting unit. Using an alias instead of directly a standard type can help if we need to change the base type. Even if this is unlikely to happen, it is always a good programming practice.</descr>
      </element>
      <element name="TIndexes">
        <short>A list of indexes to reference subsets of elements in other lists like TArea and TSegments.</short>
      </element>
      <element name="TAdjacenceGraph">
        <short>List of list of adjacent rectangles</short>
        <descr>This list gives for each rectrangle, referenced by the same index in a given area,  the list the adjacent rectangles.
Two rectangles are adjacent if their intersection is not empty and not reduced to a unique point.

Adjacent rectangles are used to identify which rectangles are candidates to route throught.

The adjacence grapgh can be seen as a compact implementation of a tree. It allow roouting by walking in the tree from the start point to the end point.</descr>
      </element>
      <element name="AddRect">
        <short>Adds a rectangle to an area.</short>
      </element>
      <element name="RemoveRect">
        <short>Removes a rectangle from an area. If the rectangle is only a sub rectangle of one in the list, the latter is split into mutiple sub rectangles.</short>
      </element>
      <element name="Containers">
        <short>Returns the list of indexes of the rectangles containing the given point for the given area.</short>
      </element>
      <element name="Adjacents">
        <short>Returns the list of indexes of the rectangles intersecting a particular rectangle in an area for the given area.</short>
      </element>
      <element name="AdjacenceGraph">
        <short>Return the adjacence graph of a given area.</short>
      </element>
      <short>A unit building routes between block ports</short>
      <descr>
        <p>This unit provides a set of type definitions and an API to handle the routing problem which consists on finding a list of rectangles starting, the first containing the start point and the last containing the end point and each rectangle in the list is adjacent to the previous and to the next rectangle in the list. Also the rectangles should not involve any intersection with a rectangle modelling a block.
</p>
        <p>The first step consists in representing the design area as a list of rectangles which could be separated into two types: the blocks and the free areas.
</p>
        <p>An area is a set of contiguous rectangles, containing the start and the stop points. For routing two points we need to find one area fitting this criteria. This could be done by building the adjacence graph, which is the set of free areas in the desing. Then just looking for each area if it contains both points.
</p>
        <p>The list of free areas change each time a new block is inserted or an old block is moves or deleted. Of course each of these events should trigger an event for rebuilding the list and rerouting the design.
</p>
      </descr>
    </module>
  </package>
</fpdoc-descriptions>
